name: Provisioning
 
on: push
 
permissions:
  contents: read
 
jobs:
  provisioning:
    runs-on: ubuntu-latest
 
    steps:
      # 1. Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required for SonarQube analysis
 
      # 2. SonarQube Code Analysis
      - name: SonarQube Analysis
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: '.'  # Change this if your code is in a subfolder
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
 
      # 3. Setup Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
 
      # 4. Setup TFLint
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.44.1
 
      # 5. Terraform Formatting Check
      - name: Terraform Formatting
        run: terraform fmt -recursive -check
 
      # 6. Terraform Initialization
      - name: Terraform Init
        run: terraform init
 
      # 7. Terraform Validation
      - name: Terraform Validate
        run: terraform validate -no-color
 
      # 8. TFLint Static Code Analysis
      - name: TFLint
        run: |
          tflint --version
          tflint --init
          tflint --config=.tflint.hcl --chdir=./
 
      # 9. TFSec Security Scan
      - name: TFSec Scan
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          additional_args: "--force-all-dirs"
        continue-on-error: true  # Allow pipeline to proceed even if tfsec fails
 
      # 10. Terrascan Security Scan
      - name: Terrascan Security Scan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'terraform'
          iac_version: 'v14'
          policy_type: 'aws'
          only_warn: true
          sarif_upload: false
 
      # 11. Snyk Security Scan
      - name: Snyk Infrastructure Scan
        uses: snyk/actions/iac@master
        with:
          file: '.'
          args: '--severity-threshold=medium'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true
 
      # 12. Terraform Plan
      - name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY }}
          TF_VAR_secret_key: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          terraform plan -no-color -input=false -var-file=environment/dev.tfvars
 
      # 13. Terraform Apply (only on main branch)
      - name: Terraform Apply
        # if: github.ref == 'refs/heads/main'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY }}
          TF_VAR_secret_key: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          terraform apply -auto-approve -no-color -input=false -var-file=environment/dev.tfvars
